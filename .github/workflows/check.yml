# This workflow will install Python dependencies, run tests and lint with a
# variety of Python versions. For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Automatic testing and linting

on:
  # Run this workflow on all branches, but only when Python code has been
  # modified. Otherwise, it does not make sense to test and lint...
  push:
    branches:
      - "**"
    paths:
      - "**.py"
  pull_request:
    branches:
      - "**"
    paths:
      - "**.py"

jobs:

  # Check code quality, formatting style, etc.
  lint:
    runs-on: ubuntu-latest
    steps:
      # Get the source code
      - uses: actions/checkout@v4
      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Lint with Flake8
        uses: py-actions/flake8@v2
        with:
          # We exclude the docs config, because it is not part of the code.
          exclude: docs/source/conf.py

  # Test that the code runs correctly, without errors.
  test:
    runs-on: ubuntu-latest
    strategy:
      # We want to test on multiple versions of Python to make sure most users
      # will be able to use our code. The following versions are the ones that
      # are active (either bugfix or security) at the time of creation.
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      # Get the source code
      - uses: actions/checkout@v4
      # Install Python (multiple versions due to the matrix)
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Install the source code dependencies
      - name: Install dependencies
        # Pip now supports installing from pyproject.toml directly.
        # We want the `dev` extra dependencies (pytest and flake8).
        # We want to install this project as a "development installation"
        # (https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs)
        run: |
          python -m pip install --upgrade pip
          pip install --editable '.[dev]'
      # Run automatic tests using unittest as the orchestrator
      - name: Test with unittest
        run: python -m unittest tests/test_*.py
