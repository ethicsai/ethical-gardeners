Tutorial: Launching the Ethical Gardeners Simulation
====================================================

This tutorial explains how to launch and configure the Ethical Gardeners simulation environment, and how to interpret the results generated by the simulation.

Hydra Configuration System
--------------------------

The Ethical Gardeners project uses Hydra for configuration management, which allows you to modularly configure your simulation without modifying the code.

Configuration Structure
^^^^^^^^^^^^^^^^^^^^^^^

The configuration is organized into several groups:

.. code-block::

    configs/
    ├── config.yaml                # Main configuration file with default values
    ├── grid/                      # Grid initialization configurations
    ├── observation/               # Observation strategy configurations
    ├── metrics/                   # Metrics collection configurations
    └── renderer/                  # Visualization configurations

Main Configuration Groups
^^^^^^^^^^^^^^^^^^^^^^^^^

- **Grid**: Controls how the environment grid is initialized (random, from code, or from file)
- **Observation**: Determines how agents perceive the environment (partial or total visibility)
- **Metrics**: Controls how simulation metrics are collected and exported (export, send to Weights & Biases, or both)
- **Renderer**: Controls how the simulation is visualized (console, graphical, or both)

Launching the Simulation
------------------------

Basic Launch Command
^^^^^^^^^^^^^^^^^^^^

To run the simulation with the default configuration. After cloning the project, at the project root, use the following command:

.. code-block:: bash

    python ethicalgardeners.main --config-dir configs --config-name config

Modifying the Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can override configurations directly from the command line:

.. code-block:: bash

    python ethicalgardeners.main \
      grid=from_code \
      observation=partial \
      observation.range=2 \
      metrics=export \
      renderer=graphical \
      num_iterations=1000

Common Configuration Scenarios
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- **Training**: ``grid=random metrics=full renderer=none``
- **Visualization**: ``grid=from_code renderer=graphical``
- **Debugging**: ``grid=from_code renderer=console``
- **Analysis**: ``grid=from_file metrics=export renderer=none``

Understanding Metrics
---------------------

The ``MetricsCollector`` tracks various metrics during the simulation execution.

Collected Metrics
^^^^^^^^^^^^^^^^^

- **Step Count**: Current step in the simulation
- **Flower Statistics**: Number of flowers planted and harvested (total and per agent)
- **Pollution Levels**: Average pollution percentage and cells exceeding different pollution thresholds (25%, 50%, 75%, and 90%)
- **Rewards**: Current and accumulated rewards for each agent
- **Active Agent**: ID of the currently active agent

Where to Find Metrics
^^^^^^^^^^^^^^^^^^^^^

When metrics export is enabled (``metrics=export`` or ``metrics=full``), metrics are saved to:

- **Default path**: ``./metrics/metrics_run_[TIMESTAMP].csv``
- **Custom path**: Specified via ``metrics.out_dir_path=your/custom/path``

The CSV file contains all metrics for each step of the simulation.

Sending Metrics to External Services
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

With ``metrics=send`` or ``metrics=full``, metrics are also sent to Weights & Biases (wandb) for online visualization and experiment tracking.

Visualization Results
---------------------

The ``Renderer`` classes provide visualization of the simulation environment during and after the simulation.

Available real-time visualization options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. **ConsoleRenderer**: Text-based visualization in the terminal
2. **GraphicalRenderer**: Graphical visualization using Pygame
3. **Both**: Can be used simultaneously with ``renderer=full``

Understanding the Visualization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the graphical visualization, by default:

- **Grid cells**: Light green indicates lower pollution, dark green indicates higher pollution
- **Obstacles**: Gray cells
- **Agents**: Colored squares of reddish to purple hues with agent IDs
- **Flowers**: Colored circles from greenish to yelowish hues, with size depending on growth stage

In the console visualization, by default:

- **Ground**: Represented by a space character
- **Obstacles**: Represented by '#'
- **Flowers**: Represented by 'F' followed by type and growth stage
- **Agents**: Represented by 'A' followed by agent ID
- **Pollution**: Displayed as a number after each cell type. Empty for obstacles

Where to Find post-analysis Videos
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When post-analysis is enabled (``renderer.console.post_analysis_on=True`` or ``renderer.graphical.post_analysis_on=True``), videos using the graphical visualization are saved to:

- **Default path**: ``./videos/simulation_video_[TIMESTAMP].mp4``
- **Custom path**: Specified via ``renderer.console.out_dir_path`` or ``renderer.graphical.out_dir_path``

Example: Complete Analysis Configuration
----------------------------------------

To run a complete analysis with metrics collection and visualization:

.. code-block:: bash

    python ethicalgardeners.main \
      metrics=export \
      metrics.out_dir_path=./my_experiment/metrics \
      renderer=graphical \
      renderer.graphical.post_analysis_on=True \
      renderer.graphical.out_dir_path=./my_experiment/videos \
      num_iterations=2000

This will run a 2000-step simulation, save metrics to CSV files, and generate a video of the simulation.
